class User < ActiveRecord::Base
  include Mongoid::Document
  include Mongoid::Timestamps

  # Relationships
  has_and_belongs_to_many :projects
  has_many :apps

  # Include default devise modules. Others available are:
  # :token_authenticatable, :encryptable, :confirmable, :lockable, :timeoutable and :omniauthable
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :trackable, :validatable, :confirmable

  ## Database authenticatable
  field :email,              :type => String, :null => false, :default => ""
  field :encrypted_password, :type => String, :null => false, :default => ""

  ## Recoverable
  field :reset_password_token,   :type => String
  field :reset_password_sent_at, :type => Time

  ## Rememberable
  field :remember_created_at, :type => Time

  ## Trackable
  field :sign_in_count,      :type => Integer, :default => 0
  field :current_sign_in_at, :type => Time
  field :last_sign_in_at,    :type => Time
  field :current_sign_in_ip, :type => String
  field :last_sign_in_ip,    :type => String

  ## Encryptable
  # field :password_salt, :type => String

  ## Confirmable
  field :confirmation_token,   :type => String
  field :confirmed_at,         :type => Time
  field :confirmation_sent_at, :type => Time
  field :unconfirmed_email,    :type => String # Only if using reconfirmable

  ## Lockable
  # field :failed_attempts, :type => Integer, :default => 0 # Only if lock strategy is :failed_attempts
  # field :unlock_token,    :type => String # Only if unlock strategy is :email or :both
  # field :locked_at,       :type => Time

  # Custom fields
  field :name
  
  field :courseone,		:type => String
  field :gradeone,		      :type => String
  field :coursetwo,		            :type => String
  field :gradetwo,			      	  :type => String
  field :coursethree, 				  :type => String
  field :gradethree,  				  :type => String
  field :name,          :type => String
  field :courses,       :type => String
  field :gpa,           :type => String
  field :summary,	      :type => String
  field :position_id,   :type => Integer
  field :otherInfo,     :type => String
  field :currentSchool, :type => String
  field :department,	  :type => String
  field :isAdmin,       :type => Boolean, :default => false
  field :times_visited, :type => Hash, :default => Hash.new

  ## Token authenticatable
  # field :authentication_token, :type => String
  
  
  #validates_uniqueness_of :email, :case_sensitive => false
  attr_accessible :name, :email, :password, :password_confirmation, :remember_me, :courses, :gpa, :summary, :position_id, :otherInfo, :currentSchool, :department, :times_visited#, :isAdmin
  
  validates :name, :presence => true, :length => { :maximum => 50 }
  validates :position, :presence => true
  validates :currentSchool, :presence => true
  validates :department, :presence => true
  validates :email , :presence => true # devise checks uniquness and case insens already
 
  def ownedProjects
     Project.where(:owner_id => self.id)
  end
  
  def professor?
    self.position_id==2
  end

  def admin?
    return self.isAdmin
  end

  def position   
    if position_id==0
      "Undergraduate"
    elsif position_id==1
      "Graduate"
    elsif position_id==2
      "Faculty"
    elsif position_id==3
      "Staff"
    elsif position_id==4
      "Other"
    end
  end
  
  def updateViews(project)
    times_visited_hash = self.times_visited
   
    if !times_visited_hash.include?(project.id.to_s)
      times_visited_hash[project.id.to_s] = 1
    else
      times_visited_hash[project.id.to_s] = times_visited_hash[project.id.to_s]  + 1;
    end
  
    self.times_visited = times_visited_hash;
    self.save!
  end
  
  def suggestions
    # find projects that been viewed by other users who have viewed projects that i have viewed
    my_top_viewed_projects = Hash[self.times_visited.sort].keys.take(5) # array of top 5 (or less) projects ive seen
    recs = Array.new # later - make it a hash for efficiency 
    User.all.each do |other_user|
      if other_user.id != self.id
        break if recs.length >= 10 || recs.length == Project.all.count 
        other_users_projects_by_view_count = Hash[other_user.times_visited.sort].keys
        other_user_top_projects = other_users_projects_by_view_count.take(5)
        my_top_viewed_projects.each do |id|
          break if recs.length >= 10 || recs.length == Project.all.count 
          if other_user_top_projects.include?(id)
            other_user_top_projects.each do |other_id|
              if !recs.include?(other_id) && !my_top_viewed_projects.include?(other_id) && Project.exists?(:conditions => {id: other_id}) && recs.length < 10 # makes sure the project still exists, and isnt the one youve seen
                recs << other_id
              end
            end
          end
        end
      end
    end
    return recs
  end
end

